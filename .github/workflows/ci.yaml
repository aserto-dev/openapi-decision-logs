name: ci

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      proto_ref:
      proto_sha:
  push:
    branches:
      - main
      - v*
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
  # Run tests for PRs
  pull_request:

env:
  VAULT_ADDR: https://vault.eng.aserto.com/
  GO_VERSION: "1.19"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Read Configuration
      uses: hashicorp/vault-action@v2.4.1
      id: vault
      with:
        url: ${{ env.VAULT_ADDR }}
        token: ${{ secrets.VAULT_TOKEN }}
        secrets: |
          kv/data/github  "SSH_PRIVATE_KEY"     | SSH_PRIVATE_KEY;

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: |
          mkdir -p $HOME/.ssh
          umask 0077 && echo -e "${SSH_PRIVATE_KEY}" > $HOME/.ssh/id_rsa
          ssh-keyscan github.com >> $HOME/.ssh/known_hosts

          git config --global url."git@github.com:".insteadOf https://github.com/
          git config --global user.email "github-bot@aserto.com"
          git config --global user.name "Aserto Bot"

          eval `ssh-agent`
          ssh-add $HOME/.ssh/id_rsa

          go run mage.go deps

    - name: Clean generated code
      run: go run mage.go clean

    - name: Generate
      run: go run mage.go generate

    - name: Commit changes
      id: commit_changes
      if: github.event_name == 'workflow_dispatch'
      uses: EndBug/add-and-commit@v7
      with:
        default_author: github_actions
        add: 'aserto'

    - name: Dispatch to aserto-dev/ts-decision-logs if a change was committed
      if: steps.commit_changes.outputs.committed && github.event_name == 'workflow_dispatch'
      uses: benc-uk/workflow-dispatch@v1
      with:
        inputs: '{"OPENAPI_SHA": "${{ steps.commit_changes.outputs.commit_sha }}", "PROTO_REF": "${{ github.event.inputs.proto_ref }}"}'
        ref: main
        repo: aserto-dev/ts-decision-logs
        token: ${{ steps.vault.outputs.READ_WRITE_TOKEN }}
        workflow: generate

  release:
    runs-on: ubuntu-latest
    needs: build
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    if: true == false #TODO: figure out how we release this.
    steps:
      - name: Read Configuration
        uses: hashicorp/vault-action@v2.1.0
        id: vault
        with:
          url: ${{ env.VAULT_ADDR }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            kv/data/readme  "README_VERSION_API_KEY"    | README_VERSION_API_KEY;
            kv/data/readme  "DECISION_LOGS"             | DECISION_LOGS;
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Update API spec version
        id: latest_readmeio_version
        shell: bash
        run: |
          echo "Install rdme"
          npm install rdme@7.2.0

          echo "Npm fund"
          npm fund
          echo "Get versions"
          LATEST_READMEIO_VERSION=$(curl -X GET \
            https://dash.readme.io/api/v1/version \
            -u ${{ steps.vault.outputs.README_VERSION_API_KEY }}:)
          echo "Compute latest versions"
          LATEST_READMEIO_VERSION=$(echo "$LATEST_READMEIO_VERSION" | jq -r 'sort_by(.createdAt)[-1].version')
          echo "$LATEST_READMEIO_VERSION"

          echo "Publish Decision Logs API spec"
          npx rdme openapi ./publish/decision-logs/openapi.json --key ${{ steps.vault.outputs.README_VERSION_API_KEY }} --id ${{ steps.vault.outputs.DECISION_LOGS_API_DEFINITION_ID }}

          echo "Update API spec version"
          npx rdme versions:update --version=$LATEST_READMEIO_VERSION --key ${{ steps.vault.outputs.README_VERSION_API_KEY }} --isPublic true --main true --beta false <<< ${{ env.RELEASE_VERSION }}
